<?xml version="1.0" encoding="UTF-8" ?>
<pbj-schema xmlns="http://gdbots.io/pbj/xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://gdbots.io/pbj/xsd http://gdbots.io/pbj/xsd/schema.xsd">

  <schema id="pbj:eme:collector:node:submission:1-0-0">
    <fields>
      <field name="form_ref" type="node-ref" required="true"/>
      <field name="collector" type="message">
        <description>
          The application that collected the message. This is set on the
          server by the collector app itself.
        </description>
        <any-of>
          <curie>gdbots:contexts::app</curie>
        </any-of>
      </field>
      <field name="first_name" type="string"/>
      <field name="last_name" type="string"/>
      <field name="email" type="string" format="email"/>
      <field name="email_domain" type="string" format="hostname"/>
      <field name="address" type="message">
        <any-of>
          <curie>gdbots:geo::address</curie>
        </any-of>
      </field>
      <field name="phone" type="string" pattern="^\+?[1-9]\d{1,14}$" max="20" rule="map">
        <description>
          A general format for international telephone numbers.
          @link https://en.wikipedia.org/wiki/E.164
        </description>
      </field>
      <field name="dob" type="date"/>
      <field name="age" type="tiny-int" max="120">
        <description>
          The "age" is generally populated if "dob" is present by using the difference of
          "dob" and "occurred_at" to determine the age at the time of the submission.
        </description>
      </field>
      <field name="height" type="tiny-int" max="120">
        <description>The person's physical height recorded in inches.</description>
      </field>
      <field name="weight" type="small-int" max="1500">
        <description>The person's physical weight recorded in pounds.</description>
      </field>
      <field name="gender" type="int-enum">
        <default>0</default>
        <enum id="gdbots:common:gender"/>
      </field>
      <field name="sexual_orientation" type="string-enum">
        <default>unknown</default>
        <enum id="gdbots:common:sexual-orientation"/>
      </field>
      <field name="story" type="text"/>
      <field name="file_ids" type="identifier" rule="set">
        <php-options>
          <imports>use Gdbots\Schemas\Common\FileId;</imports>
          <class-name>FileId::class</class-name>
        </php-options>
        <js-options>
          <imports>import FileId from '@gdbots/schemas/gdbots/common/FileId';</imports>
          <class-proto>FileId</class-proto>
        </js-options>
      </field>
      <field name="networks" type="string" pattern="^[\w\.-]+$" max="50" rule="map">
        <description>
          Networks is a map that contains handles/usernames on a social network.
          E.g. facebook:homer, twitter:stackoverflow, youtube:coltrane78.
        </description>
      </field>
      <field name="mentions" type="string" pattern="^[\w\.-]+$" max="50" rule="set">
        <description>
          Mentions contains the usernames extracted from the "networks" map and possibly
          parsed from other text fields. Makes it possible to search @mentions.
        </description>
      </field>
      <field name="ppid" type="string" pattern="^[\w\/\.:-]+$">
        <description>Publisher provided identifier (PPID)</description>
      </field>
      <field name="hashtags" type="string" format="hashtag" rule="set"/>
      <field name="has_notes" type="boolean"/>
      <field name="interview_id" type="identifier">
        <php-options>
          <imports>use Gdbots\Schemas\Common\FileId;</imports>
          <class-name>FileId::class</class-name>
        </php-options>
        <js-options>
          <imports>import FileId from '@gdbots/schemas/gdbots/common/FileId';</imports>
          <class-proto>FileId</class-proto>
        </js-options>
      </field>
      <field name="is_blocked" type="boolean"/>
      <field name="is_read" type="boolean"/>
      <field name="last_read_at" type="microtime" use-type-default="false"/>
      <field name="last_read_by_ref" type="node-ref">
        <description>
          The user who last read this submission.
        </description>
      </field>
      <field name="is_verified" type="boolean">
        <description>
          If true this submission was verified to be from the associated ctx_user_ref or email.
          Verification can be secure cookie, email confirmation, phone verification, login, etc.
          If the submission was accepted without any kind of verification this should be false.
        </description>
      </field>
      <field name="is_rejected" type="boolean"/>
      <field name="verified_at" type="microtime" use-type-default="false"/>
      <field name="allcaps" type="tiny-int" max="100">
        <description>The percentage (whole number) of text in the "story" that is ALL CAPS.</description>
      </field>
      <field name="exclaims" type="tiny-int">
        <description>The maximum number of contiguous exclamation points in the "story" text.</description>
      </field>
      <field name="cf" type="dynamic-field" rule="list">
        <description>Contains all of the answers submitted from the custom fields on the form.</description>
      </field>
      <field name="signature" type="text"/>
      <field name="s256" type="tiny-int">
        <description>
          "s256" means shard 256. Used to distribute read/write from storage and speed up
          replay/reindex processes. It can also be used to distribute workload in front end
          user interfaces or notifications (like isles in a grocery store).
          This value should NOT change once set.
        </description>
      </field>
      <field name="s32" type="tiny-int">
        <description>
          "s32" means shard 32. See field "s256" for explanation.
        </description>
      </field>
      <field name="s16" type="tiny-int">
        <description>
          "s16" means shard 16. See field "s256" for explanation.
        </description>
      </field>
    </fields>

    <mixins>
      <curie-major>eme:sys:mixin:tenant-id:v1</curie-major>
      <curie-major>gdbots:ncr:mixin:node:v1</curie-major>
      <curie-major>gdbots:common:mixin:labelable:v1</curie-major>
      <curie-major>gdbots:common:mixin:taggable:v1</curie-major>
      <curie-major>gdbots:enrichments:mixin:ip-to-geo:v1</curie-major>
      <curie-major>gdbots:enrichments:mixin:time-parting:v1</curie-major>
      <curie-major>gdbots:enrichments:mixin:time-sampling:v1</curie-major>
      <curie-major>gdbots:enrichments:mixin:ua-parser:v1</curie-major>
      <curie-major>gdbots:enrichments:mixin:utm:v1</curie-major>
    </mixins>

    <php-options>
      <insertion-points>
        <methods>
          <![CDATA[
public function getUriTemplateVars(): array
{
    return ['_id' => $this->fget('_id')];
}
            ]]>
        </methods>
      </insertion-points>
    </php-options>

    <js-options>
      <insertion-points>
        <methods>
          <![CDATA[
/**
 * @returns {Object}
 */
getUriTemplateVars() {
  return { _id: `${this.get('_id', '')}` };
}
            ]]>
        </methods>
      </insertion-points>
    </js-options>
  </schema>
</pbj-schema>
