// @link http://schemas.wbeme.com/json-schema/eme/forms/node/casting-form/1-0-0.json#
import Fb from '@gdbots/pbj/FieldBuilder';
import FileId from '@gdbots/schemas/gdbots/common/FileId';
import Format from '@gdbots/pbj/enums/Format';
import GdbotsNcrNodeV1Trait from '@gdbots/schemas/gdbots/ncr/mixin/node/NodeV1Trait';
import Message from '@gdbots/pbj/Message';
import NodeStatus from '@gdbots/schemas/gdbots/ncr/enums/NodeStatus';
import PiiImpact from '@gdbots/schemas/gdbots/forms/enums/PiiImpact';
import Schema from '@gdbots/pbj/Schema';
import T from '@gdbots/pbj/types';
import TenantId from '@wbeme/schemas/eme/sys/TenantId';
import UuidIdentifier from '@gdbots/pbj/well-known/UuidIdentifier';

export default class CastingFormV1 extends Message {
  /**
   * @private
   *
   * @returns {Schema}
   */
  static defineSchema() {
    return new Schema(this.SCHEMA_ID, this,
      [
        /*
         * The EME tenant that this message is associated with.
         */
        Fb.create(this.TENANT_ID_FIELD, T.IdentifierType.create())
          .required()
          .classProto(TenantId)
          .build(),
        /*
         * The "_id" value:
         * - MUST NOT change for the life of the node.
         * - SHOULD be globally unique
         * - SHOULD be generated by the app (ideally in default value closure... e.g. UuidIdentifier::generate())
         */
        Fb.create(this._ID_FIELD, T.IdentifierType.create())
          .required()
          .withDefault(() => UuidIdentifier.generate())
          .classProto(UuidIdentifier)
          .overridable(true)
          .build(),
        Fb.create(this.STATUS_FIELD, T.StringEnumType.create())
          .withDefault("draft")
          .classProto(NodeStatus)
          .build(),
        Fb.create(this.ETAG_FIELD, T.StringType.create())
          .maxLength(100)
          .pattern('^[\\w\\.:-]+$')
          .build(),
        Fb.create(this.CREATED_AT_FIELD, T.MicrotimeType.create())
          .build(),
        /*
         * A fully qualified reference to what created this node. This is intentionally a message-ref
         * and not a user id because it is often a program that creates nodes, not a user.
         */
        Fb.create(this.CREATOR_REF_FIELD, T.MessageRefType.create())
          .build(),
        Fb.create(this.UPDATED_AT_FIELD, T.MicrotimeType.create())
          .useTypeDefault(false)
          .build(),
        /*
         * A fully qualified reference to what updated this node. This is intentionally a message-ref
         * and not a user id because it is often a program that updates nodes, not a user.
         * E.g. "acme:iam:node:app:cli-scheduler" or "acme:iam:node:user:60c71df0-fda8-11e5-bfb9-30342d363854"
         */
        Fb.create(this.UPDATER_REF_FIELD, T.MessageRefType.create())
          .build(),
        /*
         * A reference to the last event that changed the state of this node.
         * E.g. "acme:blog:event:article-published:60c71df0-fda8-11e5-bfb9-30342d363854"
         */
        Fb.create(this.LAST_EVENT_REF_FIELD, T.MessageRefType.create())
          .build(),
        Fb.create(this.TITLE_FIELD, T.StringType.create())
          .build(),
        /*
         * A short description (a few sentences) about this form. This field should
         * not have html as it is used in metadata.
         */
        Fb.create(this.DESCRIPTION_FIELD, T.TextType.create())
          .build(),
        Fb.create(this.THANK_YOU_HEADER_FIELD, T.StringType.create())
          .build(),
        /*
         * A short thank you message (a few sentences) a user will see after
         * they submit this form. This field should have little to no html
         * as it can be used in various contexts.
         */
        Fb.create(this.THANK_YOU_TEXT_FIELD, T.TextType.create())
          .build(),
        Fb.create(this.THANK_YOU_URL_FIELD, T.StringType.create())
          .format(Format.URL)
          .build(),
        Fb.create(this.TEMPLATE_FIELD, T.StringType.create())
          .format(Format.SLUG)
          .build(),
        /*
         * A map containing (HTML, JavaScript, CSS, etc.) that is injected into
         * a template at a named insertion point, e.g. "html_head" or "footer".
         */
        Fb.create(this.CUSTOM_CODE_FIELD, T.TextType.create())
          .asAMap()
          .build(),
        Fb.create(this.FIELDS_FIELD, T.MessageType.create())
          .asAList()
          .anyOfCuries([
            'gdbots:forms:mixin:field',
          ])
          .build(),
        Fb.create(this.HASHTAGS_FIELD, T.StringType.create())
          .asASet()
          .format(Format.HASHTAG)
          .build(),
        Fb.create(this.DISCLAIMER_FIELD, T.TextType.create())
          .build(),
        Fb.create(this.IMAGE_ID_FIELD, T.IdentifierType.create())
          .classProto(FileId)
          .build(),
        Fb.create(this.PII_IMPACT_FIELD, T.StringEnumType.create())
          .classProto(PiiImpact)
          .build(),
        Fb.create(this.EXPIRES_AT_FIELD, T.DateTimeType.create())
          .build(),
        Fb.create(this.PUBLISHED_AT_FIELD, T.DateTimeType.create())
          .build(),
        /*
         * Tags is a map that categorizes data or tracks references in
         * external systems. The tags names should be consistent and descriptive,
         * e.g. fb_user_id:123, salesforce_customer_id:456.
         */
        Fb.create(this.TAGS_FIELD, T.StringType.create())
          .asAMap()
          .pattern('^[\\w\\/\\.:-]+$')
          .build(),
      ],
      this.MIXINS,
    );
  }

  /**
   * @returns {Object}
   */
  getUriTemplateVars() {
    return { _id: `${this.get(this._ID_FIELD, '')}` };
  }
}

const M = CastingFormV1;
M.prototype.SCHEMA_ID = M.SCHEMA_ID = 'pbj:eme:forms:node:casting-form:1-0-0';
M.prototype.SCHEMA_CURIE = M.SCHEMA_CURIE = 'eme:forms:node:casting-form';
M.prototype.SCHEMA_CURIE_MAJOR = M.SCHEMA_CURIE_MAJOR = 'eme:forms:node:casting-form:v1';

M.prototype.MIXINS = M.MIXINS = [
  'eme:sys:mixin:tenant-id:v1',
  'eme:sys:mixin:tenant-id',
  'gdbots:ncr:mixin:node:v1',
  'gdbots:ncr:mixin:node',
  'gdbots:forms:mixin:form:v1',
  'gdbots:forms:mixin:form',
  'gdbots:ncr:mixin:expirable:v1',
  'gdbots:ncr:mixin:expirable',
  'gdbots:ncr:mixin:publishable:v1',
  'gdbots:ncr:mixin:publishable',
  'gdbots:common:mixin:taggable:v1',
  'gdbots:common:mixin:taggable',
];

M.prototype.TENANT_ID_FIELD = M.TENANT_ID_FIELD = 'tenant_id';
M.prototype._ID_FIELD = M._ID_FIELD = '_id';
M.prototype.STATUS_FIELD = M.STATUS_FIELD = 'status';
M.prototype.ETAG_FIELD = M.ETAG_FIELD = 'etag';
M.prototype.CREATED_AT_FIELD = M.CREATED_AT_FIELD = 'created_at';
M.prototype.CREATOR_REF_FIELD = M.CREATOR_REF_FIELD = 'creator_ref';
M.prototype.UPDATED_AT_FIELD = M.UPDATED_AT_FIELD = 'updated_at';
M.prototype.UPDATER_REF_FIELD = M.UPDATER_REF_FIELD = 'updater_ref';
M.prototype.LAST_EVENT_REF_FIELD = M.LAST_EVENT_REF_FIELD = 'last_event_ref';
M.prototype.TITLE_FIELD = M.TITLE_FIELD = 'title';
M.prototype.DESCRIPTION_FIELD = M.DESCRIPTION_FIELD = 'description';
M.prototype.THANK_YOU_HEADER_FIELD = M.THANK_YOU_HEADER_FIELD = 'thank_you_header';
M.prototype.THANK_YOU_TEXT_FIELD = M.THANK_YOU_TEXT_FIELD = 'thank_you_text';
M.prototype.THANK_YOU_URL_FIELD = M.THANK_YOU_URL_FIELD = 'thank_you_url';
M.prototype.TEMPLATE_FIELD = M.TEMPLATE_FIELD = 'template';
M.prototype.CUSTOM_CODE_FIELD = M.CUSTOM_CODE_FIELD = 'custom_code';
M.prototype.FIELDS_FIELD = M.FIELDS_FIELD = 'fields';
M.prototype.HASHTAGS_FIELD = M.HASHTAGS_FIELD = 'hashtags';
M.prototype.DISCLAIMER_FIELD = M.DISCLAIMER_FIELD = 'disclaimer';
M.prototype.IMAGE_ID_FIELD = M.IMAGE_ID_FIELD = 'image_id';
M.prototype.PII_IMPACT_FIELD = M.PII_IMPACT_FIELD = 'pii_impact';
M.prototype.EXPIRES_AT_FIELD = M.EXPIRES_AT_FIELD = 'expires_at';
M.prototype.PUBLISHED_AT_FIELD = M.PUBLISHED_AT_FIELD = 'published_at';
M.prototype.TAGS_FIELD = M.TAGS_FIELD = 'tags';

M.prototype.FIELDS = M.FIELDS = [
  M.TENANT_ID_FIELD,
  M._ID_FIELD,
  M.STATUS_FIELD,
  M.ETAG_FIELD,
  M.CREATED_AT_FIELD,
  M.CREATOR_REF_FIELD,
  M.UPDATED_AT_FIELD,
  M.UPDATER_REF_FIELD,
  M.LAST_EVENT_REF_FIELD,
  M.TITLE_FIELD,
  M.DESCRIPTION_FIELD,
  M.THANK_YOU_HEADER_FIELD,
  M.THANK_YOU_TEXT_FIELD,
  M.THANK_YOU_URL_FIELD,
  M.TEMPLATE_FIELD,
  M.CUSTOM_CODE_FIELD,
  M.FIELDS_FIELD,
  M.HASHTAGS_FIELD,
  M.DISCLAIMER_FIELD,
  M.IMAGE_ID_FIELD,
  M.PII_IMPACT_FIELD,
  M.EXPIRES_AT_FIELD,
  M.PUBLISHED_AT_FIELD,
  M.TAGS_FIELD,
];

GdbotsNcrNodeV1Trait(M);

Object.freeze(M);
Object.freeze(M.prototype);
